package com.obtuse.util.packers.packer2;

/*
 * Copyright Â© 2015 Obtuse Systems Corporation
 */

import com.obtuse.util.packers.packer2.p2a.P2ATokenizer;
import com.obtuse.util.packers.packer2.p2a.StdUnPacker2a;
import com.obtuse.util.packers.packer2.p2a.UnPacker2ParseError;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

import java.util.Collection;

/**
 Describe something that managed packed and unpacked entity's packing ids.
 <p/>Note that the lifespan of a packing context is intended to be the duration of a single packing operation
 or a single unpacking operation. The {@link PackingId2}s generated by a packing context are only meaningful within
 the objects either packed or unpacked by a single pack/unpack operation. Instances of classes which implement the {@link Packable2} interface
 should not remember their packing id as such instances could be packed by more than one packing operation.
 */

public interface PackingContext2 {

//    PackingId2 allocatePackingId( EntityTypeName2 entityTypeName );

//    PackingId2 allocatePackingId( EntityTypeName2 entityTypeName, long idWithinType );

//    long getHighestPackingIdForType( EntityTypeName2 entityTypeName );

//    int getOrAllocateTypeReferenceId( Packable2 entity );

    int getOrAllocateTypeReferenceId( EntityTypeName2 typeName );

    @Nullable
    Integer findTypeReferenceId( EntityTypeName2 typeName );

    int getTypeReferenceId( EntityTypeName2 typeName );

    @NotNull
    PackingId2 rememberPackableEntity( Packable2 entity );

    @NotNull
    Collection<EntityTypeName2> getNewTypeNames();

    @Nullable
    StdPackingContext2.PackingAssociation findPackingAssociation( InstanceId instanceId );

    @NotNull
    TypeIndex2 getTypeIndex();

    @Nullable
    EntityTypeName2 findTypeByTypeReferenceId( int typeReferenceId );

    @NotNull
    EntityTypeName2 getTypeByTypeReferenceId( int typeReferenceId );

    @Nullable
    EntityTypeInfo2 findTypeInfo( int typeReferenceId );

    @NotNull
    EntityTypeInfo2 getTypeInfo( int typeReferenceId );

    @Nullable
    EntityTypeInfo2 findTypeInfo( @NotNull EntityTypeName2 typeName );

    @NotNull
    EntityTypeInfo2 getTypeInfo( @NotNull EntityTypeName2 typeName );

    boolean isTypeNameKnown( EntityTypeName2 typeName );

    EntityTypeInfo2 registerFactory( EntityFactory2 factory );

    Collection<InstanceId> getSeenInstanceIds();

    void saveTypeAlias( P2ATokenizer.P2AToken typeIdToken, P2ATokenizer.P2AToken typeNameToken )
	    throws UnPacker2ParseError;

}
