package com.obtuse.util;

/*
 * Copyright Â© 2015 Obtuse Systems Corporation
 */

/**
 * Generate unique int ids within some id-space.
 */

public interface UniqueIntegerIdGenerator {

    /**
     Set this instance's last id.
     @param lastId the new last id value.
     @throws IllegalArgumentException if this instance has already returned an id (in other words, if this instance's {@link #getUniqueId()} method
     has already been invoked).
     */

    void setLastId( int lastId );

    /**
     Determine if a call to {@link #getUniqueId()} on this instance can ever return an id that has already returned in a previous call to {@link #getUniqueId()} on this instance.
     <p/>A conforming implementation of this interface must ensure that all invocations of this method for any particular instance always
     returns the same value (in other words, if the first call to this method returns {@code true} for a given instance
     then all subsequent calls to this method must also return {@code true} for the same instance;
     similarly if the first call to this method returns {@code false} for a given instance then all subsequent calls to this method must
     also return {@code false} for the same instance).
     @return {@code true} if duplicates are possible; {@code false} otherwise.
     */

    boolean allowDuplicates();

    /**
     The name of this instance.
     <p/>implementation dependent although probably just the value of a string provided to the constructor that created this instance.
     @return the name of this instance.
     Any particular instance will always return the same name.
     */

    String getName();

    /**
     * Generate an int id which is different than any other ids generated by separate invocations of this method on
     * this instance.
     * <p/>Implementations of this method should be thread safe.
     * @return if {@link #allowDuplicates()} returns {@code true} then an int id which this method has never returned before for this instance.
     * Otherwise, an int id which has probably not been returned before by this instance.
     * The best case depends on how the unique id generator is implemented.
     * Implementations should be capable of returning at least 2<sup>24</sup> distinct ids before returning a duplicate becomes possible (this truly is
     * just a suggestion).
     * @throws IllegalArgumentException if this call could return a duplicate id and {@link #allowDuplicates()} returns {@code false} for this instance.
     */

    int getUniqueId();

}
